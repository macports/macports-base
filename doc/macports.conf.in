# MacPorts system-wide configuration file.
# Commented-out values are defaults unless otherwise noted.

# Directory under which MacPorts should install ports. This must be
# where MacPorts itself is installed.
prefix              	@prefix_expanded@

# User to run operations as when MacPorts drops privileges.
#macportsuser        	@RUNUSR@

# Directory for MacPorts working data.
portdbpath          	@localstatedir_expanded@/macports

# Colon-delimited list of directories to search for external tools
# (make(1), pkg-config(1), etc.). While installing ports, MacPorts uses
# this list for PATH. Changing this setting is intended for advanced
# users only and is unsupported.
#binpath             	@prefix_expanded@/bin:@prefix_expanded@/sbin:/bin:/sbin:/usr/bin:/usr/sbin

# Directory containing Xcode Tools. By default, MacPorts determines this
# using xcode-select(1).
#developer_dir       	@DEVELOPER_DIR@

# Location of PackageMaker. Defaults to
# "${developer_dir}/Applications/Utilities/PackageMaker.app" with Xcode
# 4.2 and earlier and "/Applications/PackageMaker.app" with 4.3 and later.
#packagemaker_path   	/Applications/PackageMaker.app

# Directory for application bundles installed by ports.
applications_dir    	@MPAPPLICATIONSDIR@

# Directory for frameworks installed by ports.
frameworks_dir      	@MPFRAMEWORKSDIR@

# Location of the MacPorts sources list.
sources_conf        	@MPCONFIGDIR_EXPANDED@/sources.conf

# Location of archive_sites.conf, used to configure sources of
# (binary) archives.
archive_sites_conf      @MPCONFIGDIR_EXPANDED@/archive_sites.conf

# Location of pubkeys.conf, used to configure public keys to use to
# verify downloaded files.
pubkeys_conf            @MPCONFIGDIR_EXPANDED@/pubkeys.conf

# Location of the MacPorts global variants definition file. Optional.
variants_conf       	@MPCONFIGDIR_EXPANDED@/variants.conf

# When MacPorts should build ports from source.
# - ifneeded: Download binary archives if available; build from source
#   otherwise.
# - always: Always build from source; never try fetching archives.
# - never: Never build from source; try fetching archives and abort if
#   unavailable.
#buildfromsource     	ifneeded

# Type of archive to use for port images created by local builds.
# Supported types are cpgz, cpio, tar, tbz, tbz2, tgz, tlz, txz, xar, zip.
#portarchivetype     	tbz2

# How to store port images.
# - archive: Image is kept in the archive as downloaded (format
#   determined by the archive site configuration) or built locally
#   (format determined by portarchivetype). Must be extracted to
#   activate the port. This is the default if the filesystem does not
#   support cloning.
# - directory: Image is stored as a directory. Downloaded archives are
#   extracted to create the directory and then deleted. This is the
#   default if the filesystem supports cloning.
# - directory_and_archive: Both archives and extracted directories are
#   kept. This is useful if you want to distribute the ports that you
#   build as archives, and also get the performance benefits of the
#   directory mode on a filesystem that supports cloning.
#portimage_mode         directory_and_archive

# Apply transparent filesystem compression to files on activation.
# Requires bsdtar with support for --hfsCompression in binpath, which can be
# provided by installing the libarchive port. This will work with HFS+ or APFS
# volumes only and will be ignored on other filesystems.
#hfscompression      	yes

# CPU architecture to target. Supported values are "ppc", "ppc64",
# "i386", "x86_64", and "arm64". Defaults to:
# - Mac OS X 10.5 and earlier: "ppc" on PowerPC, otherwise "i386".
# - Mac OS X 10.6 - 10.15: "x86_64" on 64-bit Intel, otherwise "i386".
# - macOS 11 and later: "arm64" on Apple Silicon, otherwise "x86_64".
#build_arch          	x86_64

# Space-delimited list of CPU architectures to target when building
# universal. Defaults to "i386 ppc" on Mac OS X 10.5 and earlier,
# "x86_64 i386" on Mac OS X 10.6 through macOS 10.13, "x86_64" on
# macOS 10.14 and 10.15 (these SDKs are not universal), and
# "arm64 x86_64" on macOS 11 and later. Set an empty value to disable
# universal building.
#universal_archs     	@UNIVERSAL_ARCHS@

# Use ccache, a compiler cache for C, C++, Objective-C, and
# Objective-C++. (See http://ccache.samba.org.) The "ccache" executable
# must exist in one of the directories in binpath.
#configureccache     	no

# Directory for ccache's cached compiler output. To prevent sandbox
# violation errors, the path must contain no symlinks.
#ccache_dir          	@localstatedir_expanded@/macports/build/.ccache

# Maximum size of files stored in ccache's cache. Append "G", "M", or
# "K" for gigabytes, megabytes, or kilobytes.
#ccache_size         	2G

# Use distcc, a distributed compiler for C, C++, Objective-C, and
# Objective-C++. (See http://distcc.org.) The "distcc" executable must
# exist in one of the directories in binpath.
#configuredistcc     	no

# Use pipes rather than temporary files for communication between the
# various stages of C, C++, Objective-C, and Objective-C++ compilation.
#configurepipe       	yes

# Lowered scheduling priority to use for commands run during configure,
# build, and destroot. Accepted values are 0 (normal priority) through
# 20 (lowest priority).
#buildnicevalue      	0

# Number of simultaneous make(1) jobs to use when building ports. If set
# to 0, the number of jobs will be the lesser of:
# - number of automatically-detected CPU cores
# - gigabytes of physical memory + 1
#buildmakejobs       	0

# umask value to use when a port installs its files.
#destroot_umask      	022

# Automatically execute "clean" after "install" of ports.
#portautoclean       	yes

# Keep logs after successful installations.
#keeplogs            	no

# Progress reporting.
# MacPorts will show a progressbar during lengthy operations which take more
# than $progressbar_after milliseconds. The bar reports determinate progress
# when the total amount of work and the work done are quantified. It can also
# show an "indeterminate" indication of work being done (and switch to this
# display after a certain amount of time) if $progressbar_type is set to `both`.
# The operations that use this feature are downloads, builds and rev-upgrade,
# plus a list of additional operations $progressbar_also_for which can include
# `de/activation` (for `port deactivate` and `port activate`) and possibly more
# in the future. NB: no quotes for the string values!
# progressbar_after     500
# progressbar_type      both
# progressbar_also_for  de/activation

# URLs that MacPorts attempts to download to find out whether a new version was
# released. Multiple values, space-separated; only one of the URLs needs to be
# available. Downloads will be attempted in the specified order.
#release_version_urls https://raw.githubusercontent.com/macports/macports-base/master/config/RELEASE_URL \
#                     https://trac.macports.org/export/HEAD/macports-base/config/RELEASE_URL \
#                     https://distfiles.macports.org/MacPorts/RELEASE_URL

# URL where MacPorts will download a new source code archive, if the
# release_version_urls indicate that the current version needs to be updated.
# In this URL, {version} will be replaced with the version number determined
# from release_version_urls.
#
# Additionally, ".sig" will be appended to this URL, downloaded, and used to
# verify a signature made with one of the keys in
# $prefix/share/macports/keys/base/ using the signify(1) utility.
#
# The list of distfile mirrors will automatically be appended to this option.
#release_urls https://github.com/macports/macports-base/releases/download/v{version}/MacPorts-{version}.tar.bz2

# The rsync server for fetching MacPorts base during selfupdate. This
# setting is NOT used when downloading ports trees; ports trees are
# configured using the file referenced by sources_conf. See
# https://trac.macports.org/wiki/Mirrors#MacPortsSource for a list of
# available servers.
#rsync_server        	rsync.macports.org

# Location of MacPorts base sources on rsync_server. If this references
# a .tar file, a signed .rmd160 file must exist in the same directory
# and will be used to verify its integrity. See
# https://trac.macports.org/wiki/Mirrors#MacPortsSource to find the
# correct rsync_dir for a particular rsync_server.
#rsync_dir           	macports/release/tarballs/base.tar

# Options to pass to rsync when fetching MacPorts base and the ports tree.
#rsync_options       	-rtzvl --delete-after

# Type of generated StartupItems.
# - launchd: Create StartupItems for use with launchd.
# - default: Create StartupItems for launchd on macOS and none on
#   other platforms.
# - none: Disable creation of StartupItems.
# This setting only applies when building ports from source.
#startupitem_type    	default

# Create system-level symlinks to generated StartupItems. If set to
# "no", symlinks will not be created; otherwise, symlinks will be placed
# in /Library/LaunchDaemons or /Library/LaunchAgents as appropriate.
# This setting only applies when building ports from source.
@startupitem_install@

# Whether to allow ports to automatically load their StartupItems.
# If set to "no", StartupItems will never be loaded unless the user
# explicitly requests it. If set to "yes" (the default), some ports may
# automatically load their StartupItems when they are activated.
#startupitem_autostart  yes

# Extra environment variables to keep. MacPorts sanitizes its
# environment while processing ports, keeping:
# - DISPLAY
# - DYLD_FALLBACK_FRAMEWORK_PATH, DYLD_FALLBACK_LIBRARY_PATH,
#   DYLD_FRAMEWORK_PATH, DYLD_INSERT_LIBRARIES, DYLD_LIBRARY_PATH
# - JAVA_HOME
# - ARCHIVE_SITE_LOCAL, MASTER_SITE_LOCAL, PATCH_SITE_LOCAL
# - PORTSRC
# - ALL_PROXY, FTP_PROXY, http_proxy, HTTPS_PROXY, NO_PROXY, RSYNC_PROXY
# - GROUP, USER
# - COLUMNS, LINES
# Variables listed in extra_env are added to this list. This has no
# default value; setting it is intended for advanced users and is
# unsupported. (Note that sudo(8) sanitizes its environment on Mac OS X 10.5
# and later, so it may have to be configured to pass the desired
# variables to MacPorts.)
#extra_env           	KEEP_THIS THIS_TOO

# Override proxy-related environment variables. By default, MacPorts
# takes proxy settings from the environment, from the proxy_* options
# below, and from Network Preferences, in that order. If this is set to
# "yes", MacPorts uses proxy_*, then Network Preferences, then the
# environment. (Note that Network Preferences does not have a setting
# for rsync proxies. Also note that sudo(8) sanitizes its environment on
# Mac OS X 10.5 and later, so it may have to be configured to pass desired
# variables to MacPorts.)
#proxy_override_env  	no

# Proxies. These have no default values. The analogous environment
# variables are "http_proxy", "HTTPS_PROXY", "FTP_PROXY", and
# "RSYNC_PROXY".
#proxy_http          	proxy1:12345
#proxy_https         	proxy2:67890
#proxy_ftp           	proxy3:02139
#proxy_rsync         	proxy4:11377

# Comma-delimited list of hosts that MacPorts should not access through
# the HTTP, HTTPS, and FTP proxies. This does not apply to rsync, and it
# has no default value.
#proxy_skip          	host1, host2, host3

# Space-delimited lists of glob patterns matched against download hosts
# that MacPorts should not use and that MacPorts should prefer, respectively,
# overriding the usual ping time checks. These have no default values.
#host_blacklist      	badhost1 badhost2
#preferred_hosts     	preferredhost1 preferredhost2 *.de.*.macports.org

# Whether MacPorts should automatically run rev-upgrade after upgrading
# ports.
#revupgrade_autorun  	yes

# Whether rev-upgrade should automatically rebuild ports with broken
# linking or merely report the breakage. Supported values are "report"
# and "rebuild".
#revupgrade_mode     	rebuild

# Space-delimited list of files and directories to delete after the
# unarchive stage and before creating a pkg. Paths are interpreted
# relative to prefix, and there is no default value. This is useful for
# removing unnecessary files and directories prior to pkg or mpkg
# deployment.
#pkg_post_unarchive_deletions	include share/doc share/man

# Whether the user interface should ask interactive questions
#ui_interactive         yes

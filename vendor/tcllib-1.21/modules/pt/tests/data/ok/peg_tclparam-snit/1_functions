## -*- tcl -*-
##
## Snit-based Tcl/PARAM implementation of the parsing
## expression grammar
##
##	TEMPLATE
##
## Generated from file	TEST
##            for user  unknown
##
# # ## ### ##### ######## ############# #####################
## Requirements

package require Tcl 8.5
package require snit
package require pt::rde ; # Implementation of the PARAM
			  # virtual machine underlying the
			  # Tcl/PARAM code used below.

# # ## ### ##### ######## ############# #####################
##

snit::type ::PARSER {
    # # ## ### ##### ######## #############
    ## Public API

    constructor {} {
	# Create the runtime supporting the parsing process.
	set myparser [pt::rde ${selfns}::ENGINE]
	return
    }

    method parse {channel} {
	$myparser reset $channel
	MAIN ; # Entrypoint for the generated code.
	return [$myparser complete]
    }

    method parset {text} {
	$myparser reset
	$myparser data $text
	MAIN ; # Entrypoint for the generated code.
	return [$myparser complete]
    }

    # # ## ### ###### ######## #############
    ## Configuration

    pragma -hastypeinfo    0
    pragma -hastypemethods 0
    pragma -hasinfo        0
    pragma -simpledispatch 1

    # # ## ### ###### ######## #############
    ## Data structures.

    variable myparser {} ; # Our instantiation of the PARAM.

    # # ## ### ###### ######## #############
    ## BEGIN of GENERATED CODE. DO NOT EDIT.

    #
    # Grammar Start Expression
    #
    
    proc MAIN {} { upvar 1 myparser myparser
        sym_Expression
        return
    }
    
    #
    # value Symbol 'Expression'
    #
    
    proc sym_Expression {} { upvar 1 myparser myparser
        # (Function)
    
        $myparser si:value_symbol_start Expression
        sym_Function
        $myparser si:reduce_symbol_end Expression
        return
    }
    
    #
    # value Symbol 'Function'
    #
    
    proc sym_Function {} { upvar 1 myparser myparser
        # (Sinus)
    
        $myparser si:value_symbol_start Function
        sym_Sinus
        $myparser si:reduce_symbol_end Function
        return
    }
    
    #
    # value Symbol 'Sinus'
    #
    
    proc sym_Sinus {} { upvar 1 myparser myparser
        # x
        #     "sin\("
        #     (Expression)
        #     '\)'
    
        $myparser si:value_symbol_start Sinus
        sequence_9
        $myparser si:reduce_symbol_end Sinus
        return
    }
    
    proc sequence_9 {} { upvar 1 myparser myparser
        # x
        #     "sin\("
        #     (Expression)
        #     '\)'
    
        $myparser si:void_state_push
        $myparser si:next_str sin\50
        $myparser si:voidvalue_part
        sym_Expression
        $myparser si:valuevalue_part
        $myparser si:next_char \51
        $myparser si:value_state_merge
        return
    }
    
    ## END of GENERATED CODE. DO NOT EDIT.
    # # ## ### ###### ######## #############
}

# # ## ### ##### ######## ############# #####################
## Ready

package provide SNIT_PACKAGE 1
return

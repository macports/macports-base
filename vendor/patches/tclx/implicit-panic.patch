From ced4caca9d31f3e396e4236f478e07082ab41fc3 Mon Sep 17 00:00:00 2001
From: Jeremy Huddleston Sequoia <jeremyhu@macports.org>
Date: Mon, 22 Jun 2020 00:30:24 -0700
Subject: [PATCH] tclx8.4: Use Tcl_Panic instead of deprecated / implicitly
 declared panic()

Signed-off-by: Jeremy Huddleston Sequoia <jeremyhu@macports.org>
(cherry picked from commit 599111920090326d17a90853f9db5fd3c617b336)
---
 vendor/tclx-8.4.4/generic/tclExtdInt.h  |  2 +-
 vendor/tclx-8.4.4/generic/tclXdup.c     |  2 +-
 vendor/tclx-8.4.4/generic/tclXfcntl.c   |  4 ++--
 vendor/tclx-8.4.4/generic/tclXhandles.c |  2 +-
 vendor/tclx-8.4.4/generic/tclXprofile.c |  8 ++++----
 vendor/tclx-8.4.4/generic/tclXsignal.c  |  6 +++---
 vendor/tclx-8.4.4/generic/tclXstring.c  |  2 +-
 vendor/tclx-8.4.4/generic/tclXutil.c    | 10 +++++-----
 8 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/vendor/tclx-8.4.4/generic/tclExtdInt.h b/vendor/tclx-8.4.4/generic/tclExtdInt.h
index e92a6596e..dcd1e8b85 100644
--- a/vendor/tclx-8.4.4/generic/tclExtdInt.h
+++ b/vendor/tclx-8.4.4/generic/tclExtdInt.h
@@ -47,7 +47,7 @@
  */
 #ifdef TCLX_DEBUG
 #   define TclX_Assert(expr) ((expr) ? (void)0 : \
-                              panic("TclX assertion failure: %s:%d \"%s\"\n",\
+                              Tcl_Panic("TclX assertion failure: %s:%d \"%s\"\n",\
                                     __FILE__, __LINE__, "expr"))
 #else
 #   define TclX_Assert(expr)
diff --git a/vendor/tclx-8.4.4/generic/tclXdup.c b/vendor/tclx-8.4.4/generic/tclXdup.c
index 7e83fdaa4..87ae811d0 100644
--- a/vendor/tclx-8.4.4/generic/tclXdup.c
+++ b/vendor/tclx-8.4.4/generic/tclXdup.c
@@ -75,7 +75,7 @@ DupChannelOptions (Tcl_Interp *interp,
         goto errorExit;
     }
     if ((optArgc % 2) != 0) {
-        panic("channel didn't return keyword/value pairs");
+        Tcl_Panic("channel didn't return keyword/value pairs");
     }
 
     for (idx = 0; idx < optArgc; idx += 2) {
diff --git a/vendor/tclx-8.4.4/generic/tclXfcntl.c b/vendor/tclx-8.4.4/generic/tclXfcntl.c
index 070caa313..0da14307c 100644
--- a/vendor/tclx-8.4.4/generic/tclXfcntl.c
+++ b/vendor/tclx-8.4.4/generic/tclXfcntl.c
@@ -204,7 +204,7 @@ GetFcntlAttr (Tcl_Interp *interp, Tcl_Channel channel, int mode, int attrib)
             return TCL_ERROR;
         break;
       default:
-        panic ("bug in fcntl get attrib");
+        Tcl_Panic ("bug in fcntl get attrib");
         value = 0; /* suppress compiler warning for initialized value */
     }
 
@@ -260,7 +260,7 @@ SetFcntlAttrObj (Tcl_Interp *interp,
       case ATTR_KEEPALIVE:
         return TclXOSsetsockopt (interp, channel, SO_KEEPALIVE, value);
       default:
-        panic ("buf in fcntl set attrib");
+        Tcl_Panic ("buf in fcntl set attrib");
     }
     return TCL_ERROR;  /* Should never be reached */
 }
diff --git a/vendor/tclx-8.4.4/generic/tclXhandles.c b/vendor/tclx-8.4.4/generic/tclXhandles.c
index 97c09ff90..0de292c03 100644
--- a/vendor/tclx-8.4.4/generic/tclXhandles.c
+++ b/vendor/tclx-8.4.4/generic/tclXhandles.c
@@ -539,7 +539,7 @@ TclX_HandleFree (void_pt headerPtr, void_pt entryPtr)
 
     entryHdrPtr = HEADER_AREA (entryPtr);
     if (entryHdrPtr->freeLink != ALLOCATED_IDX)
-        panic ("Tcl_HandleFree: entry not allocated %x\n", entryHdrPtr);
+        Tcl_Panic ("Tcl_HandleFree: entry not allocated %x\n", entryHdrPtr);
 
     entryHdrPtr->freeLink = tblHdrPtr->freeHeadIdx;
     tblHdrPtr->freeHeadIdx =
diff --git a/vendor/tclx-8.4.4/generic/tclXprofile.c b/vendor/tclx-8.4.4/generic/tclXprofile.c
index 9143a6645..9cf66e066 100644
--- a/vendor/tclx-8.4.4/generic/tclXprofile.c
+++ b/vendor/tclx-8.4.4/generic/tclXprofile.c
@@ -228,7 +228,7 @@ PushEntry (profInfo_t *infoPtr,
          * Only global level can be NULL.
          */
         if (scanPtr == NULL)
-            panic (PROF_PANIC, 1);
+            Tcl_Panic (PROF_PANIC, 1);
     }
     entryPtr->prevScopePtr = scanPtr;
     infoPtr->scopeChainPtr = entryPtr;
@@ -434,7 +434,7 @@ ProfCommandEvalSetup (profInfo_t *infoPtr, int *isProcPtr)
         UpdateTOSTimes (infoPtr);
         do {
             if (infoPtr->stackPtr->evalLevel != UNKNOWN_LEVEL) 
-                panic (PROF_PANIC, 2);  /* Not an initial entry */
+                Tcl_Panic (PROF_PANIC, 2);  /* Not an initial entry */
             PopEntry (infoPtr);
         } while (infoPtr->stackPtr->procLevel > procLevel);
     }
@@ -569,7 +569,7 @@ ProfTraceRoutine (ClientData  clientData,
     Tcl_CmdInfo cmdInfo;
 
     if (cmd == NULL)
-        panic (PROF_PANIC, 4);
+        Tcl_Panic (PROF_PANIC, 4);
 
     //TIP #571: We don' want to profile the tailcall itself. As it can only be called in a procedure/lambda context
     if ( ! strcmp((*objv)->bytes, "tailcall") ) {
@@ -701,7 +701,7 @@ TurnOnProfiling (profInfo_t *infoPtr, int commandMode, int evalMode)
          * Only global level can be NULL.
          */
         if (scanPtr == NULL)
-            panic (PROF_PANIC, 6);
+            Tcl_Panic (PROF_PANIC, 6);
     }
     infoPtr->scopeChainPtr = scanPtr;
 
diff --git a/vendor/tclx-8.4.4/generic/tclXsignal.c b/vendor/tclx-8.4.4/generic/tclXsignal.c
index 385601ae2..e163e605f 100644
--- a/vendor/tclx-8.4.4/generic/tclXsignal.c
+++ b/vendor/tclx-8.4.4/generic/tclXsignal.c
@@ -631,11 +631,11 @@ SignalTrap (int signalNum)
 #ifdef SIGCHLD
     if (signalNum != SIGCHLD) {
         if (SetSignalState (signalNum, SignalTrap, FALSE) == TCL_ERROR)
-            panic ("SignalTrap bug");
+            Tcl_Panic ("SignalTrap bug");
     }
 #else
     if (SetSignalState (signalNum, SignalTrap, FALSE) == TCL_ERROR)
-        panic ("SignalTrap bug");
+        Tcl_Panic ("SignalTrap bug");
 #endif /* SIGCHLD */
 #endif /* NO_SIGACTION */
 }
@@ -1540,7 +1540,7 @@ SignalCmdCleanUp (ClientData clientData, Tcl_Interp *interp)
             break;
     }
     if (idx == numInterps)
-        panic ("signal interp lost");
+        Tcl_Panic ("signal interp lost");
 
     interpTable [idx] = interpTable [--numInterps];
 
diff --git a/vendor/tclx-8.4.4/generic/tclXstring.c b/vendor/tclx-8.4.4/generic/tclXstring.c
index 2c4216936..76ab80a8f 100644
--- a/vendor/tclx-8.4.4/generic/tclXstring.c
+++ b/vendor/tclx-8.4.4/generic/tclXstring.c
@@ -666,7 +666,7 @@ TclX_CtypeObjCmd (ClientData clientData,
 #define IS_8BIT_UNICHAR(c) (c <= 255)
 
     if (TCL_UTF_MAX > sizeof(number)) {
-        panic("TclX_CtypeObjCmd: UTF character longer than a int");
+        Tcl_Panic("TclX_CtypeObjCmd: UTF character longer than a int");
     }
 
     /*FIX: Split into multiple procs */
diff --git a/vendor/tclx-8.4.4/generic/tclXutil.c b/vendor/tclx-8.4.4/generic/tclXutil.c
index 90cc9d1ae..e1fe3ed50 100644
--- a/vendor/tclx-8.4.4/generic/tclXutil.c
+++ b/vendor/tclx-8.4.4/generic/tclXutil.c
@@ -476,7 +476,7 @@ ParseTranslationOption (char *strValue)
     } else if (STREQU (strValue, "platform")) {
         return TCLX_TRANSLATE_PLATFORM;
     }
-    panic ("ParseTranslationOption bug");
+    Tcl_Panic ("ParseTranslationOption bug");
     return TCL_ERROR;  /* Not reached */
 }
 
@@ -507,7 +507,7 @@ FormatTranslationOption (int value)
       case TCLX_TRANSLATE_PLATFORM:
         return "platform";
       default:
-        panic ("FormatTranslationOption bug");
+        Tcl_Panic ("FormatTranslationOption bug");
     }
     return NULL;  /* Not reached */
 }
@@ -620,7 +620,7 @@ TclX_GetChannelOption (Tcl_Interp  *interp,
     return TCL_OK;
 
   fatalError:
-    panic ("TclX_GetChannelOption bug");  /* FIX: return error. */
+    Tcl_Panic ("TclX_GetChannelOption bug");  /* FIX: return error. */
     return 0;  /* Not reached */
 }
 
@@ -715,7 +715,7 @@ TclX_SetChannelOption (Tcl_Interp *interp,
     return Tcl_SetChannelOption (interp, channel, strOption, strValue);
 
   fatalError:
-    panic ("TclX_SetChannelOption bug");
+    Tcl_Panic ("TclX_SetChannelOption bug");
     return TCL_ERROR;  /* Not reached */
 }
 
@@ -926,7 +926,7 @@ TclX_RestoreResultErrorInfo (Tcl_Interp *interp, Tcl_Obj *saveObjPtr)
 	/*
 	 * This should never happen
 	 */
-        panic ("invalid TclX result save object");
+        Tcl_Panic ("invalid TclX result save object");
     }
 
     Tcl_SetVar2Ex(interp, ERRORCODE, NULL, saveObjv[2], TCL_GLOBAL_ONLY);
-- 
2.31.1


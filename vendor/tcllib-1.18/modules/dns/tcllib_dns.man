[vset DNS_VERSION 1.3.5]
[manpage_begin dns n [vset DNS_VERSION]]
[see_also resolver(5)]
[keywords DNS]
[keywords {domain name service}]
[keywords resolver]
[keywords {rfc 1034}]
[keywords {rfc 1035}]
[keywords {rfc 1886}]
[copyright {2002, Pat Thoyts}]
[moddesc   {Domain Name Service}]
[titledesc {Tcl Domain Name Service Client}]
[category  Networking]
[require Tcl 8.2]
[require dns [opt [vset DNS_VERSION]]]
[description]
[para]

The dns package provides a Tcl only Domain Name Service client. You
should refer to (1) and (2) for information about the DNS protocol or
read resolver(3) to find out how the C library resolves domain names.

The intention of this package is to insulate Tcl scripts
from problems with using the system library resolver for slow name servers.
It may or may not be of practical use. Internet name resolution is a
complex business and DNS is only one part of the resolver. You may
find you are supposed to be using hosts files, NIS or WINS to name a
few other systems. This package is not a substitute for the C library
resolver - it does however implement name resolution over DNS.

The package also extends the package [package uri] to support DNS URIs
(4) of the form [uri dns:what.host.com] or
[uri dns://my.nameserver/what.host.com]. The [cmd dns::resolve]
command can handle DNS URIs or simple domain names as a query.

[para]

[emph Note:] The package defaults to using DNS over TCP
connections. If you wish to use UDP you will need to have the
[package tcludp] package installed and have a version that
correctly handles binary data (> 1.0.4).
This is available at [uri http://tcludp.sourceforge.net/].
If the [package udp] package is present then UDP will be used by default.

[section COMMANDS]

[list_begin definitions]

[call [cmd ::dns::resolve] [arg query] [opt [arg "options"]]]

Resolve a domain name using the [term DNS] protocol. [arg query] is
the domain name to be lookup up. This should be either a fully
qualified domain name or a DNS URI.

[list_begin definitions]
[def "[cmd -nameserver] [arg hostname] or [cmd -server] [arg hostname]"]
  Specify an alternative name server for this request.
[def "[cmd -protocol] [arg tcp|udp]"]
  Specify the network protocol to use for this request. Can be one of
  [arg tcp] or [arg udp].
[def "[cmd -port] [arg portnum]"]
  Specify an alternative port.
[def "[cmd -search] [arg domainlist]"]
[def "[cmd -timeout] [arg milliseconds]"]
  Override the default timeout.
[def "[cmd -type] [arg TYPE]"]
  Specify the type of DNS record you are interested in. Valid values
  are A, NS, MD, MF, CNAME, SOA, MB, MG, MR, NULL, WKS, PTR, HINFO,
  MINFO, MX, TXT, SPF, SRV, AAAA, AXFR, MAILB, MAILA and *.
  See RFC1035 for details about the return values.
  See [uri http://spf.pobox.com/] about SPF.
  See (3) about AAAA records and RFC2782 for details of SRV records.

[def "[cmd -class] [arg CLASS]"]
  Specify the class of domain name. This is usually IN but may be one
  of IN for internet domain names, CS, CH, HS or * for any class.
[def "[cmd -recurse] [arg boolean]"]
  Set to [arg false] if you do not want the name server to recursively
  act upon your request. Normally set to [arg true].
[def "[cmd -command] [arg procname]"]
  Set a procedure to be called upon request completion. The procedure
  will be passed the token as its only argument.
[list_end]

[para]
[call [cmd ::dns::configure] [opt [arg "options"]]]

The [cmd ::dns::configure] command is used to setup the dns
package. The server to query, the protocol and domain search path are
all set via this command. If no arguments are provided then a list of
all the current settings is returned.  If only one argument then it
must the the name of an option and the value for that option is
returned.

[list_begin definitions]
[def "[cmd -nameserver] [arg hostname]"]
  Set the default name server to be used by all queries. The default is
  [term localhost].
[def "[cmd -protocol] [arg tcp|udp]"]
  Set the default network protocol to be used. Default is [arg tcp].
[def "[cmd -port] [arg portnum]"]
  Set the default port to use on the name server. The default is 53.
[def "[cmd -search] [arg domainlist]"]
  Set the domain search list. This is currently not used.
[def "[cmd -timeout] [arg milliseconds]"]
  Set the default timeout value for DNS lookups. Default is 30 seconds.
[def "[cmd -loglevel] [arg level]"]
  Set the log level used for emitting diagnostic messages from this
  package. The default is [term warn]. See the [package log] package
  for details of the available levels.
[list_end]

[para]
[call [cmd ::dns::name] [arg token]]
  Returns a list of all domain names returned as an answer to your query.

[para]
[call [cmd ::dns::address] [arg token]]
  Returns a list of the address records that match your query.

[para]
[call [cmd ::dns::cname] [arg token]]
  Returns a list of canonical names (usually just one) matching your query.

[para]
[call [cmd ::dns::result] [arg token]]
  Returns a list of all the decoded answer records provided for your
  query. This permits you to extract the result for more unusual query types.

[para]
[call [cmd ::dns::status] [arg token]]
  Returns the status flag. For a successfully completed query this will be
  [emph ok]. May be [emph error] or [emph timeout] or [emph eof].
  See also [cmd ::dns::error]

[para]
[call [cmd ::dns::error] [arg token]]
  Returns the error message provided for requests whose status is [emph error].
  If there is no error message then an empty string is returned.

[para]
[call [cmd ::dns::reset] [arg token]]
  Reset or cancel a DNS query.

[para]
[call [cmd ::dns::wait] [arg token]]
  Wait for a DNS query to complete and return the status upon completion.

[para]
[call [cmd ::dns::cleanup] [arg token]]
  Remove all state variables associated with the request.

[para]
[call [cmd ::dns::nameservers]]

Attempts to return a list of the nameservers currently configured
for the users system. On a unix machine this parses the
/etc/resolv.conf file for nameservers (if it exists) and on Windows
systems we examine certain parts of the registry. If no nameserver can
be found then the loopback address (127.0.0.1) is used as a default.

[list_end]

[comment { -----------------------------------------------------------  }]

[section EXAMPLES]

[para]
[example {
% set tok [dns::resolve www.tcl.tk]
::dns::1
% dns::status $tok
ok
% dns::address $tok
199.175.6.239
% dns::name $tok
www.tcl.tk
% dns::cleanup $tok
}]

[para]
Using DNS URIs as queries:
[example {
% set tok [dns::resolve "dns:tcl.tk;type=MX"]
% set tok [dns::resolve "dns://l.root-servers.net/www.tcl.tk"]
}]

[para]
Reverse address lookup:
[example {
% set tok [dns::resolve 127.0.0.1]
::dns::1
% dns::name $tok
localhost
% dns::cleanup $tok
}]

[comment { -----------------------------------------------------------  }]

[section {REFERENCES}]

[list_begin enumerated]

[enum]
    Mockapetris, P., "Domain Names - Concepts and Facilities",
    RFC 1034, November 1987.
    ([uri http://www.ietf.org/rfc/rfc1034.txt])

[enum]
    Mockapetris, P., "Domain Names - Implementation and Specification",
    RFC 1035, November 1087.
    ([uri http://www.ietf.org/rfc/rfc1035.txt])

[enum]
    Thompson, S. and Huitema, C., "DNS Extensions to support IP version 6",
    RFC 1886, December 1995.
    ([uri http://www.ietf.org/rfc/rfc1886.txt])

[enum]
    Josefsson, S., "Domain Name System Uniform Resource Identifiers",
    Internet-Draft, October 2003,
    ([uri http://www.ietf.org/internet-drafts/draft-josefsson-dns-url-09.txt])

[enum]
    Gulbrandsen, A., Vixie, P. and Esibov, L.,
    "A DNS RR for specifying the location of services (DNS SRV)",
    RFC 2782, February 2000,
    ([uri http://www.ietf.org/rfc/rfc2782.txt])

[enum]
    Ohta, M. "Incremental Zone Transfer in DNS",
    RFC 1995, August 1996,
    ([uri http://www.ietf.org/rfc/rfc1995.txt])

[list_end]

[section AUTHORS]
Pat Thoyts

[vset CATEGORY dns]
[include ../doctools2base/include/feedback.inc]
[manpage_end]

'\"
'\" Generated from file 'tcllib_try\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2008 Donal K\&. Fellows, BSD licensed
'\"
.TH "try" n 1 tcllib "Forward compatibility implementation of [try]"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
try \- try - Trap and process errors and exceptions
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
package require \fBtry  ?1?\fR
.sp
\fB::try\fR \fIbody\fR ?\fIhandler\&.\&.\&.\fR? ?\fBfinally\fR \fIscript\fR?
.sp
.BE
.SH DESCRIPTION
.PP
This package provides a forward-compatibility implementation of Tcl
8\&.6's try/finally command (TIP 329), for Tcl 8\&.5\&. The code was
directly pulled from Tcl 8\&.6 revision ?, when try/finally was
implemented as Tcl procedure instead of in C\&.
.TP
\fB::try\fR \fIbody\fR ?\fIhandler\&.\&.\&.\fR? ?\fBfinally\fR \fIscript\fR?
This command executes the script \fIbody\fR and, depending on what the
outcome of that script is (normal exit, error, or some other
exceptional result), runs a handler script to deal with the case\&. Once
that has all happened, if the \fBfinally\fR clause is present, the
\fIscript\fR it includes will be run and the result of the handler (or
the \fIbody\fR if no handler matched) is allowed to continue to
propagate\&. Note that the \fBfinally\fR clause is processed even if
an error occurs and irrespective of which, if any, \fIhandler\fR is
used\&.
.sp
The \fIhandler\fR clauses are each expressed as several words,
and must have one of the following forms:
.RS
.TP
\fBon\fR \fIcode variableList script\fR
This clause matches if the evaluation of \fIbody\fR completed with the
exception code \fIcode\fR\&. The \fIcode\fR may be expressed as an
integer or one of the following literal words:
\fBok\fR, \fBerror\fR, \fBreturn\fR, \fBbreak\fR, or
\fBcontinue\fR\&. Those literals correspond to the integers 0 through
4 respectively\&.
.TP
\fBtrap\fR \fIpattern variableList script\fR
This clause matches if the evaluation of \fIbody\fR resulted in an
error and the prefix of the \fB-errorcode\fR from the interpreter's
status dictionary is equal to the \fIpattern\fR\&. The number of prefix
words taken from the \fB-errorcode\fR is equal to the list-length
of \fIpattern\fR, and inter-word spaces are normalized in both the
\fB-errorcode\fR and \fIpattern\fR before comparison\&.
.sp
The \fIvariableList\fR word in each \fIhandler\fR is always
interpreted as a list of variable names\&. If the first word of the list
is present and non-empty, it names a variable into which the result of
the evaluation of \fIbody\fR (from the main \fBtry\fR) will be placed;
this will contain the human-readable form of any errors\&. If the second
word of the list is present and non-empty, it names a variable into
which the options dictionary of the interpreter at the moment of
completion of execution of \fIbody\fR will be placed\&.
.sp
The \fIscript\fR word of each \fIhandler\fR is also always
interpreted the same: as a Tcl script to evaluate if the clause is
matched\&. If \fIscript\fR is a literal \fB-\fR and the \fIhandler\fR
is not the last one, the \fIscript\fR of the following \fIhandler\fR
is invoked instead (just like with the \fBswitch\fR command)\&.
.sp
Note that \fIhandler\fR clauses are matched against in order,
and that the first matching one is always selected\&.
At most one \fIhandler\fR clause will selected\&.
As a consequence, an \fBon error\fR will mask any subsequent
\fBtrap\fR in the \fBtry\fR\&. Also note that \fBon error\fR is
equivalent to \fBtrap {}\fR\&.
.sp
If an exception (i\&.e\&. any non-\fBok\fR result) occurs during
the evaluation of either the \fIhandler\fR or the \fBfinally\fR
clause, the original exception's status dictionary will be added to
the new exception's status dictionary under the \fB-during\fR key\&.
.RE
.PP
.SH EXAMPLES
Ensure that a file is closed no matter what:
.PP
.CS


set f [open /some/file/name a]
\fBtry\fR {
    puts \\$f "some message"
    # \&.\&.\&.
} \fBfinally\fR {
    close \\$f
}

.CE
.PP
Handle different reasons for a file to not be openable for reading:
.PP
.CS


\fBtry\fR {
    set f [open /some/file/name]
} \fBtrap\fR {POSIX EISDIR} {} {
    puts "failed to open /some/file/name: it's a directory"
} \fBtrap\fR {POSIX ENOENT} {} {
    puts "failed to open /some/file/name: it doesn't exist"
}

.CE
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such in the category \fItry\fR of the
\fITcllib Trackers\fR [http://core\&.tcl\&.tk/tcllib/reportlist]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH "SEE ALSO"
catch(n), error(n), return(n), throw(n)
.SH KEYWORDS
cleanup, error, exception, final, resource management
.SH CATEGORY
Utility
.SH COPYRIGHT
.nf
Copyright (c) 2008 Donal K\&. Fellows, BSD licensed

.fi
'\"
'\" Generated from file 'token_shell\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "string::token::shell" n 1\&.2 tcllib "Text and string utilities"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
string::token::shell \- Parsing of shell command line
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
package require \fBstring::token::shell  ?1\&.2?\fR
.sp
package require \fBstring::token  ?1?\fR
.sp
package require \fBfileutil \fR
.sp
\fB::string token shell\fR ?\fB-indices\fR? ?\fB-partial\fR? ?--? \fIstring\fR
.sp
.BE
.SH DESCRIPTION
This package provides a command which parses a line of text using
basic \fBsh\fR-syntax into a list of words\&.
.PP
The complete set of procedures is described below\&.
.TP
\fB::string token shell\fR ?\fB-indices\fR? ?\fB-partial\fR? ?--? \fIstring\fR
This command parses the input \fIstring\fR under the assumption of it
following basic \fBsh\fR-syntax\&.
The result of the command is a list of words in the \fIstring\fR\&.
An error is thrown if the input does not follow the allowed syntax\&.
The behaviour can be modified by specifying any of the two options
\fB-indices\fR and \fB-partial\fR\&.
.RS
.TP
\fB--\fR
When specified option parsing stops at this point\&. This option is
needed if the input \fIstring\fR may start with dash\&. In other words,
this is pretty much required if \fIstring\fR is user input\&.
.TP
\fB-indices\fR
When specified the output is not a list of words, but a list of
4-tuples describing the words\&. Each tuple contains the type of the
word, its start- and end-indices in the input, and the actual text of
the word\&.
.sp
Note that the length of the word as given by the indices can
differ from the length of the word found in the last element of the
tuple\&. The indices describe the words extent in the input, including
delimiters, intra-word quoting, etc\&. whereas for the actual text of
the word delimiters are stripped, intra-word quoting decoded, etc\&.
.sp
The possible token types are
.RS
.TP
\fBPLAIN\fR
Plain word, not quoted\&.
.TP
\fBD:QUOTED\fR
Word is delimited by double-quotes\&.
.TP
\fBS:QUOTED\fR
Word is delimited by single-quotes\&.
.TP
\fBD:QUOTED:PART\fR
.TP
\fBS:QUOTED:PART\fR
Like the previous types, but the word has no closing quote, i\&.e\&. is
incomplete\&. These token types can occur if and only if the option
\fB-partial\fR was specified, and only for the last word of the
result\&. If the option \fB-partial\fR was not specified such
incomplete words cause the command to thrown an error instead\&.
.RE
.TP
\fB-partial\fR
When specified the parser will accept an incomplete quoted word
(i\&.e\&. without closing quote) at the end of the line as valid instead
of throwing an error\&.
.RE
.sp
The basic shell syntax accepted here are unquoted, single- and
double-quoted words, separated by whitespace\&. Leading and trailing
whitespace are possible too, and stripped\&.
Shell variables in their various forms are \fInot\fR recognized, nor
are sub-shells\&.
As for the recognized forms of words, see below for the detailed
specification\&.
.RS
.TP
\fBsingle-quoted word\fR
A single-quoted word begins with a single-quote character, i\&.e\&.
\fB'\fR (ASCII 39) followed by zero or more unicode characters not a
single-quote, and then closed by a single-quote\&.
.sp
The word must be followed by either the end of the string, or
whitespace\&. A word cannot directly follow the word\&.
.TP
\fBdouble-quoted word\fR
A double-quoted word begins with a double-quote character, i\&.e\&.
\fB"\fR (ASCII 34) followed by zero or more unicode characters not a
double-quote, and then closed by a double-quote\&.
.sp
Contrary to single-quoted words a double-quote can be embedded
into the word, by prefacing, i\&.e\&. escaping, i\&.e\&. quoting it with a
backslash character \fB\\\fR (ASCII 92)\&. Similarly a backslash
character must be quoted with itself to be inserted literally\&.
.TP
\fBunquoted word\fR
Unquoted words are not delimited by quotes and thus cannot contain
whitespace or single-quote characters\&. Double-quote and backslash
characters can be put into unquoted words, by quting them like for
double-quoted words\&.
.TP
\fBwhitespace\fR
Whitespace is any unicode space character\&.
This is equivalent to \fBstring is space\fR, or the regular
expression \\\\s\&.
.sp
Whitespace may occur before the first word, or after the last word\&. Whitespace must occur between adjacent words\&.
.RE
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such in the category \fItextutil\fR of the
\fITcllib Trackers\fR [http://core\&.tcl\&.tk/tcllib/reportlist]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
bash, lexing, parsing, shell, string, tokenization
.SH CATEGORY
Text processing
'\"
'\" Generated from file 'gpx\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2010, Keith Vetter <kvetter@gmail\&.com>
'\"
.TH "gpx" n 0\&.9 tcllib "GPS eXchange Format (GPX)"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
gpx \- Extracts waypoints, tracks and routes from GPX files
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
package require \fBgpx  ?0\&.9?\fR
.sp
\fB::gpx::Create\fR \fIgpxFilename\fR ?\fIrawXML\fR?
.sp
\fB::gpx::Cleanup\fR \fItoken\fR
.sp
\fB::gpx::GetGPXMetadata\fR \fItoken\fR
.sp
\fB::gpx::GetWaypointCount\fR \fItoken\fR
.sp
\fB::gpx::GetAllWaypoints\fR \fItoken\fR
.sp
\fB::gpx::GetTrackCount\fR \fItoken\fR
.sp
\fB::gpx::GetTrackMetadata\fR \fItoken\fR \fIwhichTrack\fR
.sp
\fB::gpx::GetTrackPoints\fR \fItoken\fR \fIwhichTrack\fR
.sp
\fB::gpx::GetRouteCount\fR \fItoken\fR
.sp
\fB::gpx::GetRouteMetadata\fR \fItoken\fR \fIwhichRoute\fR
.sp
\fB::gpx::GetRoutePoints\fR \fItoken\fR \fIwhichRoute\fR
.sp
.BE
.SH DESCRIPTION
.PP
This module parses and extracts waypoints, tracks, routes and
metadata from a GPX (GPS eXchange) file\&. Both GPX version 1\&.0
and 1\&.1 are supported\&.
.SH COMMANDS
.TP
\fB::gpx::Create\fR \fIgpxFilename\fR ?\fIrawXML\fR?
The \fB::gpx::Create\fR is the first command called to process GPX
data\&. It takes the GPX data from either the \fIrawXML\fR
parameter if present or from the contents of \fIgpxFilename\fR,
and parses it using \fItdom\fR\&. It returns a token value that is used
by all the other commands\&.
.TP
\fB::gpx::Cleanup\fR \fItoken\fR
This procedure cleans up resources associated with \fItoken\fR\&.
It is \fIstrongly\fR recommended that you call this
function after you are done with a given GPX file\&.
Not doing so will result in memory not being freed, and
if your app calls \fB::gpx::Create\fR enough times, the
memory leak could cause a performance hit\&.\&.\&.or worse\&.
.TP
\fB::gpx::GetGPXMetadata\fR \fItoken\fR
This procedure returns a dictionary of the metadata
associated with the GPX data identified by \fItoken\fR\&.
The format of the metadata dictionary is described
below, but keys \fIversion\fR and \fIcreator\fR
will always be present\&.
.TP
\fB::gpx::GetWaypointCount\fR \fItoken\fR
This procedure returns the number of waypoints defined in the GPX
data identified by \fItoken\fR\&.
.TP
\fB::gpx::GetAllWaypoints\fR \fItoken\fR
This procedure returns the a list of waypoints defined in the GPX
data identified by \fItoken\fR\&. The format of each waypoint item
is described below\&.
.TP
\fB::gpx::GetTrackCount\fR \fItoken\fR
This procedure returns the number of tracks defined in the GPX
data identified by \fItoken\fR\&.
.TP
\fB::gpx::GetTrackMetadata\fR \fItoken\fR \fIwhichTrack\fR
This procedure returns a dictionary of the metadata
associated track number \fIwhichTrack\fR (1 based) in
the GPX data identified by \fItoken\fR\&.
The format of the metadata dictionary is described below\&.
.TP
\fB::gpx::GetTrackPoints\fR \fItoken\fR \fIwhichTrack\fR
The procedure returns a list of track points comprising track
number \fIwhichTrack\fR (1 based) in the GPX data identified by
\fItoken\fR\&. The format of the metadata dictionary is described below\&.
.TP
\fB::gpx::GetRouteCount\fR \fItoken\fR
This procedure returns the number of routes defined in the GPX
data identified by \fItoken\fR\&.
.TP
\fB::gpx::GetRouteMetadata\fR \fItoken\fR \fIwhichRoute\fR
This procedure returns a dictionary of the metadata
associated route number \fIwhichRoute\fR (1 based) in
the GPX data identified by \fItoken\fR\&.
The format of the metadata dictionary is described below\&.
.TP
\fB::gpx::GetRoutePoints\fR \fItoken\fR \fIwhichRoute\fR
The procedure returns a list of route points comprising route
number \fIwhichRoute\fR (1 based) in the GPX data identified by
\fItoken\fR\&. The format of the metadata dictionary is described below\&.
.PP
.SH "DATA STRUCTURES"
.TP
metadata dictionary
The metadata associated with either the GPX document, a
track, a route, a waypoint, a track point or route
point is returned in a dictionary\&. The keys of that
dictionary will be whatever optional GPX elements are
present\&. The value for each key depends on the GPX schema
for that element\&. For example, the value for a version
key will be a string, while for a link key will be
a sub-dictionary with keys \fIhref\fR and optionally
\fItext\fR and \fItype\fR\&.
.TP
point item
Each item in a track or route list of points consists of
a list of three elements: \fIlatitude\fR, \fIlongitude\fR and
\fImetadata dictionary\fR\&. \fILatitude\fR and \fIlongitude\fR
are decimal numbers\&. The \fImetadata dictionary\fR format is
described above\&. For points in a track, typically there will
always be ele (elevation) and time metadata keys\&.
.PP
.SH EXAMPLE
.CS


% set token [::gpx::Create myGpxFile\&.gpx]
% set version [dict get [::gpx::GetGPXMetadata $token] version]
% set trackCnt [::gpx::GetTrackCount $token]
% set firstPoint [lindex [::gpx::GetTrackPoints $token 1] 0]
% lassign $firstPoint lat lon ptMetadata
% puts "first point in the first track is at $lat, $lon"
% if {[dict exists $ptMetadata ele]} {
     puts "at elevation [dict get $ptMetadata ele] meters"
  }
% ::gpx::Cleanup $token

.CE
.SH REFERENCES
.IP [1]
GPX: the GPS Exchange Format
(\fIhttp://www\&.topografix\&.com/gpx\&.asp\fR)
.IP [2]
GPX 1\&.1 Schema Documentation (\fIhttp://www\&.topografix\&.com/GPX/1/1/\fR)
.IP [3]
GPX 1\&.0 Developer's Manual (\fIhttp://www\&.topografix\&.com/gpx_manual\&.asp\fR)
.PP
.SH AUTHOR
Keith Vetter
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such in the category \fIgpx\fR of the
\fITcllib Trackers\fR [http://core\&.tcl\&.tk/tcllib/reportlist]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.SH KEYWORDS
gps, gpx
.SH CATEGORY
File formats
.SH COPYRIGHT
.nf
Copyright (c) 2010, Keith Vetter <kvetter@gmail\&.com>

.fi
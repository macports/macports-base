#!/bin/bash
# -*- coding: utf-8; mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=sh:et:sw=4:ts=4:sts=4
#
# Copyright (c) 2002-2007 Juan Manuel Palacios <jmpp@macports.org>, The MacPorts Project.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of Apple, Inc., The MacPorts Project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# postflight
# $Id$


#set -x

# Script identification ('cause more often than not the svn Id is not expanded):
VERSION=1.8.0

# Abstraction variables:
PREFIX=/opt/local
BINPATH=${PREFIX}/bin
SBINPATH=${PREFIX}/sbin
CONFIGPATH=${PREFIX}/etc/macports
MANPAGES=${PREFIX}/share/man
TCLSH=/usr/bin/tclsh
TCL_PACKAGE_DIR=/Library/Tcl
TIMESTAMP=$(date +"%Y-%m-%d_at_%H:%M:%S")
BACKUP_SUFFIX=macports-saved_${TIMESTAMP}
OUR_STRING="MacPorts Installer addition on ${TIMESTAMP}"

# Create config files from defaults if not present
function setup_configs {
    for f in macports.conf sources.conf variants.conf ; do
        if [ ! -f ${CONFIGPATH}/${f} ]; then
            /bin/cp ${CONFIGPATH}/${f}.default ${CONFIGPATH}/${f}
        fi
    done
}

# Command to update the MacPorts installation through "selfupdate":
function update_macports {
    echo "Synchronizing the MacPorts installation with the project's rsync server..."
    if ! ${BINPATH}/port -v selfupdate; then 
        echo "An attempt to synchronize your recent MacPorts installation with the project's rsync server failed!"
        echo "Please run 'sudo port -d selfupdate' manually to find out the cause of the error."
    else
        echo "Successful!"
    fi
    
    # Add [default] tag to the central MacPorts repository, if it isn't already
    ${TCLSH} ${PACKAGE_PATH}/Contents/Resources/upgrade_sources_conf_default.tcl ${PREFIX}
    # Remove any duplicates from the dep map (could occur with 1.6 and earlier)
    ${TCLSH} ${PACKAGE_PATH}/Contents/Resources/dep_map_clean.tcl ${TCL_PACKAGE_DIR}
}

# Through this command we write an environment variable to an appropriate shell configuration file,
# backing up the original only if it exists and if it doesn't contain the ${OUR_STRING} identification string,
# which hints that we've already tweaked it and therefore already backed it up.
function write_setting () {
    if [ -f ${HOME}/.${CONF_FILE} ] && ! grep "${OUR_STRING}" ${HOME}/.${CONF_FILE} > /dev/null; then
        echo "Backing up your ${HOME}/.${CONF_FILE} shell confguration file as ${HOME}/.${CONF_FILE}.${BACKUP_SUFFIX} before adapting it for MacPorts."
        /bin/cp -fp ${HOME}/.${CONF_FILE} "${HOME}/.${CONF_FILE}.${BACKUP_SUFFIX}" || {
            echo "An attempt to backup your original configuration file failed! Please set your MacPorts compatible environment manually."
            update_macports
            exit 1
        }
        echo -e "\n##\n# Your previous ${HOME}/.${CONF_FILE} file was backed up as ${HOME}/.${CONF_FILE}.${BACKUP_SUFFIX}\n##" >> ${HOME}/.${CONF_FILE}
    fi
    echo -e "\n# ${OUR_STRING}: adding an appropriate ${1} variable for use with MacPorts." >> ${HOME}/.${CONF_FILE}
    echo "${ENV_COMMAND} ${1}${ASSIGN}${2}" >> ${HOME}/.${CONF_FILE}
    echo -e "# Finished adapting your ${1} environment variable for use with MacPorts.\n" >> ${HOME}/.${CONF_FILE}
    chown ${USER} ${HOME}/.${CONF_FILE} || echo "Warning: unable to adapt permissions on your ${HOME}/.${CONF_FILE} shell configuration file!"
    echo "An appropriate ${1} variable has been added to your shell environment by the MacPorts installer."
}

function cleanup_man () {
    # Remove old non-compressed man pages
    echo -e "\nRemoving old man pages..."
    MAN1="port.1"
    MAN5="macports.conf.5"
    MAN7="portfile.7 portstyle.7 porthier.7 portgroup.7"
    for m in ${MAN1}; do rm -vf ${MANPAGES}/man1/$m ; done
    for m in ${MAN5}; do rm -vf ${MANPAGES}/man5/$m ; done
    for m in ${MAN7}; do rm -vf ${MANPAGES}/man7/$m ; done
    echo -e "Done.\n"
}


echo "The MacPorts Project, postflight script version ${VERSION}: checking the shell environment for user \"${USER}\"."

# Set up config files
setup_configs

# Remove old stuff
cleanup_man

# Determine the user's shell, in order to choose an appropriate configuration file we'll be tweaking.
# Exit nicely if the shell is any other than bash or tcsh, as that's considered non-standard.
USHELL=$(dscl . -read /users/${USER} shell | awk -F'/' '{print $NF}') || {
    echo "An attempt to determine your shell name failed! Please set your MacPorts compatible environment manually."
    update_macports
    exit 1
}
case "${USHELL}" in
    tcsh)
        echo "Detected the tcsh shell."
        LOGIN_FLAG=""
        ENV_COMMAND="setenv"
        ASSIGN=" "
        if [ -f ${HOME}/.tcshrc ]; then
            CONF_FILE=tcshrc
        elif [ -f ${HOME}/.cshrc ]; then
            CONF_FILE=cshrc
        else
            CONF_FILE=tcshrc
        fi
        ;;
    bash)
        echo "Detected the bash shell."
        LOGIN_FLAG="-l"
        ENV_COMMAND="export"
        ASSIGN="="
        if [ -f ${HOME}/.bash_profile ]; then
            CONF_FILE=bash_profile
        elif [ -f ${HOME}/.bash_login ]; then
            CONF_FILE=bash_login
        else
            CONF_FILE=profile
        fi
        ;;
    *)
        echo "Unknown shell ($USHELL)! Please set your MacPorts compatible environment manually."
        update_macports
        exit 0
        ;;
esac


# Adding our setting to the PATH variable if not already there:
if ${SHELL} ${LOGIN_FLAG} -c "/usr/bin/printenv PATH" | grep ${PREFIX} > /dev/null; then
    echo "Your shell already has the right PATH environment variable for use with MacPorts!"
else
    write_setting PATH "${BINPATH}:${SBINPATH}:\$PATH"
fi

# We gather the path into a variable of our own for faster operation:
ORIGINAL_MANPATH="$(${SHELL} ${LOGIN_FLAG} -c "/usr/bin/printenv MANPATH")"
# Adding our setting to the MANPATH variable only if it exists:
if ! ${SHELL} ${LOGIN_FLAG} -c "/usr/bin/env | grep MANPATH" > /dev/null || \
# and following that, if it's not empty:
  [ -z "${ORIGINAL_MANPATH}" ] || \
# or if it doesn't already contain our path:
  echo "${ORIGINAL_MANPATH}" | grep ${MANPAGES} > /dev/null || \
# or if there's no empty component somewhere in the middle of it:
  echo "${ORIGINAL_MANPATH}" | grep :: > /dev/null || \
# or at the start of it:
  [ -z "$(echo "${ORIGINAL_MANPATH}" | awk -F : '{print $1}')" ] || \
# or at the end of it:
  [ -z "$(echo "${ORIGINAL_MANPATH}" | awk -F : '{print $NF}')" ]; then
    echo "Your shell already has the right MANPATH environment variable for use with MacPorts!"
else
    write_setting MANPATH "${MANPAGES}:\$MANPATH"
fi

# Adding a DISPLAY variable only if we're running on Tiger or less and if it doesn't already exist:
if (($(sw_vers -productVersion | awk -F . '{print $2}') >= 5)) || ${SHELL} ${LOGIN_FLAG} -c "/usr/bin/env | grep DISPLAY" > /dev/null; then
    echo "Your shell already has the right DISPLAY environment variable for use with MacPorts!"
else
    write_setting DISPLAY ":0"
fi


# Postflight script is done with its job, update MacPorts and exit gracefully!
update_macports
echo "You have succesfully installed the MacPorts system, launch a terminal and try it out!"
echo "Read the port(1) manual page and http://guide.macports.org for help, http://www.macports.org/contact.php if you need to get in touch with The MacPorts Project."
exit 0

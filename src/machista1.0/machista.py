# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_machista', [dirname(__file__)])
        except ImportError:
            import _machista
            return _machista
        if fp is not None:
            try:
                _mod = imp.load_module('_machista', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _machista = swig_import_helper()
    del swig_import_helper
else:
    import _machista
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_machista.SUCCESS_swigconstant(_machista)
SUCCESS = _machista.SUCCESS

_machista.EFILE_swigconstant(_machista)
EFILE = _machista.EFILE

_machista.EMMAP_swigconstant(_machista)
EMMAP = _machista.EMMAP

_machista.EMEM_swigconstant(_machista)
EMEM = _machista.EMEM

_machista.ERANGE_swigconstant(_machista)
ERANGE = _machista.ERANGE

_machista.EMAGIC_swigconstant(_machista)
EMAGIC = _machista.EMAGIC
class macho_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, macho_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, macho_handle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
macho_handle_swigregister = _machista.macho_handle_swigregister
macho_handle_swigregister(macho_handle)

class macho_loadcmd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, macho_loadcmd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, macho_loadcmd, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["mlt_install_name"] = _machista.macho_loadcmd_mlt_install_name_get
    if _newclass:
        mlt_install_name = _swig_property(_machista.macho_loadcmd_mlt_install_name_get)
    __swig_getmethods__["mlt_type"] = _machista.macho_loadcmd_mlt_type_get
    if _newclass:
        mlt_type = _swig_property(_machista.macho_loadcmd_mlt_type_get)
    __swig_getmethods__["mlt_comp_version"] = _machista.macho_loadcmd_mlt_comp_version_get
    if _newclass:
        mlt_comp_version = _swig_property(_machista.macho_loadcmd_mlt_comp_version_get)
    __swig_getmethods__["mlt_version"] = _machista.macho_loadcmd_mlt_version_get
    if _newclass:
        mlt_version = _swig_property(_machista.macho_loadcmd_mlt_version_get)
    __swig_getmethods__["next"] = _machista.macho_loadcmd_next_get
    if _newclass:
        next = _swig_property(_machista.macho_loadcmd_next_get)
macho_loadcmd_swigregister = _machista.macho_loadcmd_swigregister
macho_loadcmd_swigregister(macho_loadcmd)

class macho_arch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, macho_arch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, macho_arch, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["mat_install_name"] = _machista.macho_arch_mat_install_name_get
    if _newclass:
        mat_install_name = _swig_property(_machista.macho_arch_mat_install_name_get)
    __swig_getmethods__["mat_rpath"] = _machista.macho_arch_mat_rpath_get
    if _newclass:
        mat_rpath = _swig_property(_machista.macho_arch_mat_rpath_get)
    __swig_getmethods__["mat_arch"] = _machista.macho_arch_mat_arch_get
    if _newclass:
        mat_arch = _swig_property(_machista.macho_arch_mat_arch_get)
    __swig_getmethods__["mat_comp_version"] = _machista.macho_arch_mat_comp_version_get
    if _newclass:
        mat_comp_version = _swig_property(_machista.macho_arch_mat_comp_version_get)
    __swig_getmethods__["mat_version"] = _machista.macho_arch_mat_version_get
    if _newclass:
        mat_version = _swig_property(_machista.macho_arch_mat_version_get)
    __swig_getmethods__["mat_loadcmds"] = _machista.macho_arch_mat_loadcmds_get
    if _newclass:
        mat_loadcmds = _swig_property(_machista.macho_arch_mat_loadcmds_get)
    __swig_getmethods__["next"] = _machista.macho_arch_next_get
    if _newclass:
        next = _swig_property(_machista.macho_arch_next_get)
macho_arch_swigregister = _machista.macho_arch_swigregister
macho_arch_swigregister(macho_arch)

class macho(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, macho, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, macho, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["mt_archs"] = _machista.macho_mt_archs_get
    if _newclass:
        mt_archs = _swig_property(_machista.macho_mt_archs_get)
macho_swigregister = _machista.macho_swigregister
macho_swigregister(macho)


def create_handle():
    return _machista.create_handle()
create_handle = _machista.create_handle

def destroy_handle(INPUT):
    return _machista.destroy_handle(INPUT)
destroy_handle = _machista.destroy_handle

def parse_file(handle, filename):
    return _machista.parse_file(handle, filename)
parse_file = _machista.parse_file

def strerror(err):
    return _machista.strerror(err)
strerror = _machista.strerror

def get_arch_name(arg1):
    return _machista.get_arch_name(arg1)
get_arch_name = _machista.get_arch_name

def format_dylib_version(arg1):
    return _machista.format_dylib_version(arg1)
format_dylib_version = _machista.format_dylib_version
# This file is compatible with both classic and new-style classes.


